// import { getContainer } from '../../inversify.config'
// import { VM_SYMBOL } from './vm.types'
// import { IVMService } from './vm.interface'

describe('Сервис виртуальной машины', () => {

    it(`
        При запуске скрипта метаинформация о скрипте корректно генерируется
        и становится доступной
    `, async () => {
        // const container = await getContainer()
        // container.snapshot()
        
        // const vmService = container
        //     .get<IVMService>(VM_SYMBOL.VMService)

        // const scriptId = vmService.run({
        //     name: 'Название скрипта',
        //     path: '/path/path/a.js',
        //     rootDir: '/path/path',
        //     apiProperties: []
        // })

        // container.restore()
    })

    it.todo(`
        Запуская скрипт в него передаётся корректно сгенерированный глобальный
        объект
    `)

    it.todo(`
        События, генерируемые api свойствами скрипта, успешно всплывают в качестве
        события активности самого скрипта
    `)

    it.todo(`
        Событие ошибки, которое генерирует api свойство скрипта, не приводят к
        дублированию события активности и генерирует событие ошибки скрипта
    `)

    it.todo(`
        Событие ошибки скрипта, успешно сохраняется в список ошибок скрипта и
        этот список не может привысить лимит
    `)

    it.todo(`
        Все собственные события скрипта генерируют событие активности скрипта
        за исключением самого события активности
    `)

    it.todo(`
        Сегмент статистики, который передается в обработчик события статистики, 
        которое генерирует api свойство скрипта, успешно добавляется список
        сегментов статистики и не может привысить лимит
    `)

    it.todo(`
        Если событие остановки скрипта срабатывает и приводит к тому, что в
        списке сохранённых скриптов заканчивается лимит остановленных скриптов,
        то самый давний остановленный скрипт удаляется из списка сохранённых
        скриптов
    `)

    it.todo(`
        Событие остановки скрипта устанавливает дату остановки скрипта
    `)

    it.todo(`
        Событие освобождения от ссылок (unlink), которое генерирует api свойство
        скрипта, запускает событие остановки скрипта, в случае, если ни одно свойство
        скрипта не имеет ссылок на сам скрипт
    `)

    it.todo(`
        Если запущенный скрипт сразу же в одном цикле событий генерирует ошибку,
        то она перехватывается и передаётся в событие ошибки скрипта
    `)

    it.todo(`
        Если скрипт закончил свою работу в одном цикле событий, то он сразу же
        будет отмечен как завершённый
    `)

    it.todo(`
        Скрипт успешно и полностью удаляется
    `)

    it.todo(`
        Статистика скрипта корректно и ожидаемым образом генерируется
    `)

})